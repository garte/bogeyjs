{"name":"bogeyJS","tagline":"bogeyJS dependency injection framework","body":"# What's all this, then?\r\n\r\n## Code organization\r\nOrganize your code by creating definitions of how to setup your different components that make up your application. These setup definitions are organized by defining modules which can be reused by different applications in different contexts.\r\n\r\n## Code reusability\r\nWe are not talking about sharing code here, we're talking about setting up the parts that make up your application regardless of what framework you want to use. Think of it as presets which construct your models, services, controllers, views - whatever you need to run your application on whatever platform that runs JS, be that for instance node.js or a browser.\r\n\r\n## Code modularity\r\nIt is possible to publish these modules for others to use in their projects. As long as you register the module within your application object you're good to go:\r\n```JavaScript\r\n    // Load a module definition\r\n    var Main = require('./module/Basics');\r\n    \r\n    // Register the dependencies you want to use for your application. This can be\r\n    // as granular as you need it to be. The definitions from the Main module will now\r\n    // be available as resources by getting them via app.get(...)\r\n    app.registerModules([Main]);\r\n```\r\n\r\n### Easy setup\r\nJust require the bogey components and you can use your code base in every context you wish. This thing will work in React, Angular, Ember... you name it. After setup it's just a single object waiting for you to pull your dependencies from.\r\n\r\n```JavaScript\r\n// Initialize resources... These may be extended as you see fit.\r\nvar loader = new Loader();\r\nvar container = new Container(loader);\r\nvar router = new Router({\r\n    basePath: '/app'\r\n});\r\n\r\nvar config = {};\r\n\r\n// Initialize the application object\r\nvar app = new Application(config, container, router);\r\n\r\n// Load a module definition\r\nvar Main = require('./module/Basics');\r\n\r\n// This will be called on bogey.start after the object has been initialized.\r\n// This could very well be part of a custom Application object if you'd want to be so bold.\r\napp.start = function () {\r\n  // Setup routes and stuff.\r\n};\r\n\r\n// Register the dependencies you want to use for your application. This can be\r\n// as granular as you need it to be.\r\napp.registerModules([Main]);\r\n\r\n// Start the app\r\nbogey.start(app).then(function (app) {\r\n  // After the application has been initialized we get the actual application object which\r\n  // basically is a dependency container.\r\n    app.get('basics.helloworld').then((helloworld) => {\r\n        // This signals the router to start listening for route events. This should only\r\n        // be invoked AFTER you're absolutely ready for action.\r\n        app.router.start();\r\n    });\r\n}).done();\r\n\r\n```\r\n\r\n### Lean structure\r\nThis thing is quite basic and should work reliably for most of its use cases.\r\n\r\n### What's with the name?\r\nDon't ask.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}